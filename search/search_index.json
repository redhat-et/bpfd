{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to bpfd bpfd is a system daemon for managing eBPF programs. It currently a work in progress! Why bpfd? bpfd seeks to solve the following problems: To allow multiple XDP programs to share the same interface To give administrators control over who can load programs and to allow them to define rules for ordering of networking eBPF programs To allow programs to be loaded automatically at system launch time To simplify the packaging and loading of eBPF-based infrastructure software (i.e Kubernetes CNI plugins) How does it work? bpfd is built using Aya an eBPF library written in Rust. It offers two ways of interaction: bpfctl : a command line tool using GRPC It is expected that humans will use bpfctl whereas other applications on the system wishing to load programs using bpfd will use the GRPC. This allows for API bindings to be generated in any language supported by protocol buffers. We are initially targeting Go and Rust. In order to allow the attachment of multiple XDP programs to the same interface, we have implemented the libxdp multiprog protocol . Offering this in bpfd allows for XDP applications whose loader was not using libxdp to benefit from this. We are also hoping to find a way for applications linked with libxdp to use bpfd instead if it's in use in the system.","title":"Welcome to bpfd"},{"location":"#welcome-to-bpfd","text":"bpfd is a system daemon for managing eBPF programs. It currently a work in progress!","title":"Welcome to bpfd"},{"location":"#why-bpfd","text":"bpfd seeks to solve the following problems: To allow multiple XDP programs to share the same interface To give administrators control over who can load programs and to allow them to define rules for ordering of networking eBPF programs To allow programs to be loaded automatically at system launch time To simplify the packaging and loading of eBPF-based infrastructure software (i.e Kubernetes CNI plugins)","title":"Why bpfd?"},{"location":"#how-does-it-work","text":"bpfd is built using Aya an eBPF library written in Rust. It offers two ways of interaction: bpfctl : a command line tool using GRPC It is expected that humans will use bpfctl whereas other applications on the system wishing to load programs using bpfd will use the GRPC. This allows for API bindings to be generated in any language supported by protocol buffers. We are initially targeting Go and Rust. In order to allow the attachment of multiple XDP programs to the same interface, we have implemented the libxdp multiprog protocol . Offering this in bpfd allows for XDP applications whose loader was not using libxdp to benefit from this. We are also hoping to find a way for applications linked with libxdp to use bpfd instead if it's in use in the system.","title":"How does it work?"},{"location":"admin/","text":"Administration Guide This guide covers how to use bpfd for System Administrators","title":"Administration Guide"},{"location":"admin/#administration-guide","text":"This guide covers how to use bpfd for System Administrators","title":"Administration Guide"},{"location":"admin/configuration/","text":"Configuration bpfd bpfd expects a configuration file to be present at /etc/bpfd.toml . If no file is found, defaults are assumed. [ tls ] # REQUIRED ca_cert = \"/etc/bpfd/certs/ca/ca.pem\" cert = \"/etc/bpfd/certs/bpfd/bpfd.pem\" key = \"/etc/bpfd/certs/bpfd/bpfd.key\" [interfaces] [interface.eth0] xdp_mode = \"hw\" # Valid xdp modes are \"hw\", \"skb\" and \"drv\". Default: \"skb\". Loading Programs at system launch time Bpfd allows the user to specify certain bpf programs to always be loaded every time the daemon is started. To do so simply create .toml files in the /etc/bpfd/programs.d directory with the following syntax: Users can specify multiple programs in a single .toml file AND multiple .toml files [[programs]] name = \"program0\" interface = \"eth0\" path = < PATH TO BPF BYTECODE > section_name = \"pass\" program_type = \"xdp\" priority = 50 [[programs]] name = \"program1\" interface = \"eth0\" path = < PATH TO BPF BYTECODE > section_name = \"drop\" program_type = \"xdp\" priority = 55 bpfctl bpfctl expects a configuration file to be present at /etc/bpfd.toml . If no file is found, defaults are assumed. [ tls ] # REQUIRED ca_cert = \"/etc/bpfd/certs/ca/ca.pem\" cert = \"/etc/bpfd/certs/bpfctl/bpfctl.pem\" key = \"/etc/bpfd/certs/bpfctl/bpfctl.key\"","title":"Configuration"},{"location":"admin/configuration/#configuration","text":"","title":"Configuration"},{"location":"admin/configuration/#bpfd","text":"bpfd expects a configuration file to be present at /etc/bpfd.toml . If no file is found, defaults are assumed. [ tls ] # REQUIRED ca_cert = \"/etc/bpfd/certs/ca/ca.pem\" cert = \"/etc/bpfd/certs/bpfd/bpfd.pem\" key = \"/etc/bpfd/certs/bpfd/bpfd.key\" [interfaces] [interface.eth0] xdp_mode = \"hw\" # Valid xdp modes are \"hw\", \"skb\" and \"drv\". Default: \"skb\".","title":"bpfd"},{"location":"admin/configuration/#loading-programs-at-system-launch-time","text":"Bpfd allows the user to specify certain bpf programs to always be loaded every time the daemon is started. To do so simply create .toml files in the /etc/bpfd/programs.d directory with the following syntax: Users can specify multiple programs in a single .toml file AND multiple .toml files [[programs]] name = \"program0\" interface = \"eth0\" path = < PATH TO BPF BYTECODE > section_name = \"pass\" program_type = \"xdp\" priority = 50 [[programs]] name = \"program1\" interface = \"eth0\" path = < PATH TO BPF BYTECODE > section_name = \"drop\" program_type = \"xdp\" priority = 55","title":"Loading Programs at system launch time"},{"location":"admin/configuration/#bpfctl","text":"bpfctl expects a configuration file to be present at /etc/bpfd.toml . If no file is found, defaults are assumed. [ tls ] # REQUIRED ca_cert = \"/etc/bpfd/certs/ca/ca.pem\" cert = \"/etc/bpfd/certs/bpfctl/bpfctl.pem\" key = \"/etc/bpfd/certs/bpfctl/bpfctl.key\"","title":"bpfctl"},{"location":"admin/tutorial/","text":"Tutorial This tutorial will show you how to use bpfd. Prerequisites This tutorial uses examples from the xdp-tutorial . You will need to check out the git repository and compile the examples. Step 1: Start bpfd sudo bpfd& Step 2: Load your first program We will load the simple xdp-pass program, which permits all traffic, to the interface eth0. The section in the object file that contains the program is \"xdp\". Finally, we will use the priority of 100 - valid values are from 0 to 255. bpfctl load -p xdp -i eth0 -s \"xdp\" --priority 100 /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o 92e3e14c-0400-4a20-be2d-f701af21873c bpfctl returns a unique identifier to the program that was loaded. This may be used to detach the program later. We can check the program was loaded using the following command: bpfctl list -i eth0 wlp2s0 xdp_mode: skb 0: 92e3e14c-0400-4a20-be2d-f701af21873c name: \"xdp\" priority: 100 path: /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o From the output above you can see the program was loaded to slot 0 on our interface and will be executed first. Step 3: Loading more programs We will now load 2 more programs with different priorities to demonstrate how bpfd will ensure they are ordered correctly: bpfctl load -p xdp -i eth0 -s \"xdp\" --priority 50 /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o 1ccc1376-60e8-4dc5-9079-6c32748fa1c4 bpfctl load -p xdp -i eth0 -s \"xdp\" --priority 200 /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o 6af7c28f-6a7f-46ee-bc98-2d92ed261369 Using bpfctl list we can see that the programs are correctly ordered. The lowest priority program is executed first, while the highest is executed last bpfctl list -i eth0 eth0 xdp_mode: skb 0: 1ccc1376-60e8-4dc5-9079-6c32748fa1c4 name: \"xdp\" priority: 50 path: /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o 1: 92e3e14c-0400-4a20-be2d-f701af21873c name: \"xdp\" priority: 100 path: /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o 2: 6af7c28f-6a7f-46ee-bc98-2d92ed261369 name: \"xdp\" priority: 200 path: /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o Step 4: Delete a program Let's remove the program at slot 1. bpfctl unload -i eth0 92e3e14c-0400-4a20-be2d-f701af21873c And we can verify that it has been removed and the other programs re-ordered: eth0 xdp_mode: skb 0: 1ccc1376-60e8-4dc5-9079-6c32748fa1c4 name: \"xdp\" priority: 50 path: /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o 1: 6af7c28f-6a7f-46ee-bc98-2d92ed261369 name: \"xdp\" priority: 200 path: /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o","title":"Tutorial"},{"location":"admin/tutorial/#tutorial","text":"This tutorial will show you how to use bpfd.","title":"Tutorial"},{"location":"admin/tutorial/#prerequisites","text":"This tutorial uses examples from the xdp-tutorial . You will need to check out the git repository and compile the examples.","title":"Prerequisites"},{"location":"admin/tutorial/#step-1-start-bpfd","text":"sudo bpfd&","title":"Step 1: Start bpfd"},{"location":"admin/tutorial/#step-2-load-your-first-program","text":"We will load the simple xdp-pass program, which permits all traffic, to the interface eth0. The section in the object file that contains the program is \"xdp\". Finally, we will use the priority of 100 - valid values are from 0 to 255. bpfctl load -p xdp -i eth0 -s \"xdp\" --priority 100 /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o 92e3e14c-0400-4a20-be2d-f701af21873c bpfctl returns a unique identifier to the program that was loaded. This may be used to detach the program later. We can check the program was loaded using the following command: bpfctl list -i eth0 wlp2s0 xdp_mode: skb 0: 92e3e14c-0400-4a20-be2d-f701af21873c name: \"xdp\" priority: 100 path: /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o From the output above you can see the program was loaded to slot 0 on our interface and will be executed first.","title":"Step 2: Load your first program"},{"location":"admin/tutorial/#step-3-loading-more-programs","text":"We will now load 2 more programs with different priorities to demonstrate how bpfd will ensure they are ordered correctly: bpfctl load -p xdp -i eth0 -s \"xdp\" --priority 50 /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o 1ccc1376-60e8-4dc5-9079-6c32748fa1c4 bpfctl load -p xdp -i eth0 -s \"xdp\" --priority 200 /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o 6af7c28f-6a7f-46ee-bc98-2d92ed261369 Using bpfctl list we can see that the programs are correctly ordered. The lowest priority program is executed first, while the highest is executed last bpfctl list -i eth0 eth0 xdp_mode: skb 0: 1ccc1376-60e8-4dc5-9079-6c32748fa1c4 name: \"xdp\" priority: 50 path: /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o 1: 92e3e14c-0400-4a20-be2d-f701af21873c name: \"xdp\" priority: 100 path: /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o 2: 6af7c28f-6a7f-46ee-bc98-2d92ed261369 name: \"xdp\" priority: 200 path: /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o","title":"Step 3: Loading more programs"},{"location":"admin/tutorial/#step-4-delete-a-program","text":"Let's remove the program at slot 1. bpfctl unload -i eth0 92e3e14c-0400-4a20-be2d-f701af21873c And we can verify that it has been removed and the other programs re-ordered: eth0 xdp_mode: skb 0: 1ccc1376-60e8-4dc5-9079-6c32748fa1c4 name: \"xdp\" priority: 50 path: /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o 1: 6af7c28f-6a7f-46ee-bc98-2d92ed261369 name: \"xdp\" priority: 200 path: /home/dave/dev/xdp-tutorial/basic01-xdp-pass/xdp_pass_kern.o","title":"Step 4: Delete a program"},{"location":"developer/","text":"Developer Guide This guide covers how to use bpfd for Developers","title":"Developer Guide"},{"location":"developer/#developer-guide","text":"This guide covers how to use bpfd for Developers","title":"Developer Guide"},{"location":"developer/go/","text":"Go An example application that uses the bpfd-go bindings can be found here Prerequisites Assuming bpfd is already installed and running on the system All requirements defined by the cilium/ebpf package libbpf development package to get the required bpf c headers Fedora: sudo dnf install libbpf-devel Ubuntu: sudo apt-get install libbpf-dev Cilium's bpf2go binary go install github.com/cilium/ebpf/cmd/bpf2go@master Generate certificates for the gocounter bpfd client bpfd uses mTLS for mutual authentication. To generate a client certificate for the gocounter example run: ./scripts/certificates.sh client gocounter Building To rebuild the c based bpf counter program example run: cd examples/gocounter && go generate To build the userspace go client run: cd examples/gocounter && go build Running First start or ensure bpfd is up and running. Then start the go program with: cd examples/gocounter && sudo ./gocounter <INTERNET INTERFACE NAME> The output should show the count and total bytes of packets as they pass through the interface as shown below: sudo ./gocounter docker0 2022/07/05 17:53:57 Program registered with a2e26a4a-5bcf-4092-be07-c4f9b50031be id 0 packets received 0 bytes received 5 packets received 1191 bytes received 5 packets received 1191 bytes received 7 packets received 1275 bytes received 7 packets received 1275 bytes received ^CExiting... Finally, press ctrl+c when finished.","title":"Go"},{"location":"developer/go/#go","text":"An example application that uses the bpfd-go bindings can be found here","title":"Go"},{"location":"developer/go/#prerequisites","text":"Assuming bpfd is already installed and running on the system All requirements defined by the cilium/ebpf package libbpf development package to get the required bpf c headers Fedora: sudo dnf install libbpf-devel Ubuntu: sudo apt-get install libbpf-dev Cilium's bpf2go binary go install github.com/cilium/ebpf/cmd/bpf2go@master","title":"Prerequisites"},{"location":"developer/go/#generate-certificates-for-the-gocounter-bpfd-client","text":"bpfd uses mTLS for mutual authentication. To generate a client certificate for the gocounter example run: ./scripts/certificates.sh client gocounter","title":"Generate certificates for the gocounter bpfd client"},{"location":"developer/go/#building","text":"To rebuild the c based bpf counter program example run: cd examples/gocounter && go generate To build the userspace go client run: cd examples/gocounter && go build","title":"Building"},{"location":"developer/go/#running","text":"First start or ensure bpfd is up and running. Then start the go program with: cd examples/gocounter && sudo ./gocounter <INTERNET INTERFACE NAME> The output should show the count and total bytes of packets as they pass through the interface as shown below: sudo ./gocounter docker0 2022/07/05 17:53:57 Program registered with a2e26a4a-5bcf-4092-be07-c4f9b50031be id 0 packets received 0 bytes received 5 packets received 1191 bytes received 5 packets received 1191 bytes received 7 packets received 1275 bytes received 7 packets received 1275 bytes received ^CExiting... Finally, press ctrl+c when finished.","title":"Running"},{"location":"developer/image-build/","text":"BPFD Container Images Container images for the bpfd and bpfctl binaries are automatically built and pushed to quay.io/bpfd whenever code is merged into the main branch of the github.com/redhat-et/bpfd repository under the :main tag. Building the images locally bpfd podman build -f /packaging/container-deployment/Containerfile.bpfd . -t bpfd:local bpfctl podman build -f /packaging/container-deployment/Containerfile.bpfctl . -t bpfctl:local Running locally in container bpfd sudo podman run --init --privileged --net = host -v /etc/bpfd/certs/:/etc/bpfd/certs/ -v /sys/fs/bpf:/sys/fs/bpf quay.io/bpfd/bpfd:main bpfctl sudo podman run --init --privileged --net = host -v /etc/bpfd/certs/:/etc/bpfd/certs/ quay.io/bpfd/bpfctl:main <COMMANDS>","title":"BPFD Container Images"},{"location":"developer/image-build/#bpfd-container-images","text":"Container images for the bpfd and bpfctl binaries are automatically built and pushed to quay.io/bpfd whenever code is merged into the main branch of the github.com/redhat-et/bpfd repository under the :main tag.","title":"BPFD Container Images"},{"location":"developer/image-build/#building-the-images-locally","text":"","title":"Building the images locally"},{"location":"developer/image-build/#bpfd","text":"podman build -f /packaging/container-deployment/Containerfile.bpfd . -t bpfd:local","title":"bpfd"},{"location":"developer/image-build/#bpfctl","text":"podman build -f /packaging/container-deployment/Containerfile.bpfctl . -t bpfctl:local","title":"bpfctl"},{"location":"developer/image-build/#running-locally-in-container","text":"","title":"Running locally in container"},{"location":"developer/image-build/#bpfd_1","text":"sudo podman run --init --privileged --net = host -v /etc/bpfd/certs/:/etc/bpfd/certs/ -v /sys/fs/bpf:/sys/fs/bpf quay.io/bpfd/bpfd:main","title":"bpfd"},{"location":"developer/image-build/#bpfctl_1","text":"sudo podman run --init --privileged --net = host -v /etc/bpfd/certs/:/etc/bpfd/certs/ quay.io/bpfd/bpfctl:main <COMMANDS>","title":"bpfctl"}]}